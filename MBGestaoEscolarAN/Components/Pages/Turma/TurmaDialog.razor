@using MBGestaoEscolarAN.Entities
@using MBGestaoEscolarAN.Services.Interfaces
@using MBGestaoEscolarAN.Repository.Interfaces
@using MBGestaoEscolarAN.ViewModels
@using MudBlazor
@using System.Threading.Channels

@inject ITurmaService TurmaService
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Class="tituloFormulario">
            <MudIcon Icon="@Icons.Material.Filled.School" Class="mr-3" /> @viewModel.TituloFormulario
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 70vh; overflow-y: auto;">
            <EditForm Model="@viewModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Nome da Turma"
                                      @bind-Value="viewModel.Nome"
                                      For="@(() => viewModel.Nome)"
                                      Required="true"
                                      Immediate="true"
                                      HelperText="Nome identificador da turma" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Código"
                                      @bind-Value="viewModel.Codigo"
                                      For="@(() => viewModel.Codigo)"
                                      Required="true"
                                      Immediate="true"
                                      HelperText="Código único da turma" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="Curso ID"
                                         @bind-Value="viewModel.CursoId"
                                         For="@(() => viewModel.CursoId)"
                                         Required="true"
                                         Immediate="true"
                                         Min="1"
                                         HelperText="ID do curso ao qual a turma pertence" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Número de Vagas"
                                      @bind-Value="viewModel.NumeroVagas"
                                      For="@(() => viewModel.NumeroVagas)"
                                      Required="true"
                                      Immediate="true"
                                      HelperText="Quantidade máxima de alunos" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Data de Início"
                                       @bind-Date="dataInicioLocal"
                                       DateFormat="dd/MM/yyyy"
                                       Required="true"
                                       Placeholder="Selecione a data de início" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Data de Fim"
                                       @bind-Date="dataFimLocal"
                                       DateFormat="dd/MM/yyyy"
                                       Required="true"
                                       Placeholder="Selecione a data de término" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Local"
                                      @bind-Value="viewModel.Local"
                                      For="@(() => viewModel.Local)"
                                      Immediate="true"
                                      HelperText="Local onde as aulas serão ministradas" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="string"
                                   Label="Modalidade"
                                   @bind-Value="viewModel.Modalidade"
                                   For="@(() => viewModel.Modalidade)"
                                   Required="true">
                            <MudSelectItem Value="@("Presencial")">Presencial</MudSelectItem>
                            <MudSelectItem Value="@("Híbrido")">Híbrido</MudSelectItem>
                            <MudSelectItem Value="@("EAD")">EAD</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="string"
                                   Label="Status da Turma"
                                   @bind-Value="viewModel.StatusTurma"
                                   For="@(() => viewModel.StatusTurma)"
                                   Required="true">
                            <MudSelectItem Value="@("Cancelada")">Cancelada</MudSelectItem>
                            <MudSelectItem Value="@("Concluída")">Concluída</MudSelectItem>
                            <MudSelectItem Value="@("Inscrições Abertas")">Inscrições Abertas</MudSelectItem>
                            <MudSelectItem Value="@("Planejada")">Planejada</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   Disabled="@salvando"
                   OnClick="SalvarTurma">
            @if (salvando)
            {
                <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ml-2">Salvando...</MudText>
            }
            else
            {
                <MudText>@viewModel.TextoBotao</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public Turma turma { get; set; } = new();
    [Parameter] public string Title { get; set; } = "";

    bool sucesso = false;
    private TurmaViewModel viewModel = new();
    private bool salvando = false;

    // Propriedades locais para gerenciar as datas
    private DateTime? dataInicioLocal
    {
        get => viewModel?.DataInicio; // Converte implicitamente de DateTime para DateTime?
        set
        {
            if (viewModel != null && value.HasValue) // Verifica se o valor não é nulo
            {
                viewModel.DataInicio = value.Value; // Converte explicitamente de DateTime? para DateTime
            }
        }
    }

    private DateTime? dataFimLocal
    {
        get => viewModel?.DataFim; // Converte implicitamente de DateTime para DateTime?
        set
        {
            if (viewModel != null && value.HasValue) // Verifica se o valor não é nulo
            {
                viewModel.DataFim = value.Value; // Converte explicitamente de DateTime? para DateTime
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (turma?.TurmaId > 0)
        {
            // Modo de alteração de um registro existente
            viewModel = new TurmaViewModel
            {
                TurmaId = turma.TurmaId,
                CursoId = turma.CursoId,
                Nome = turma.Nome,
                Codigo = turma.Codigo,
                DataInicio = turma.DataInicio,
                DataFim = turma.DataFim,
                Local = turma.Local,
                Modalidade = turma.Modalidade,
                NumeroVagas = turma.NumeroVagas,
                StatusTurma = turma.StatusTurma
            };
        }
        else
        {
            // Modo de criação de um novo registro
            viewModel = new TurmaViewModel
            {
                StatusTurma = "Concluída",
                Modalidade = "Presencial",
                DataInicio = DateTime.Today,
                DataFim = DateTime.Today.AddMonths(6) // Padrão de 6 meses de duração
            };
        }
    }

    private async Task SalvarTurma()
    {
        try
        {
            salvando = true;

            // Validação adicional de negócio

            var turma = new Turma
            {
                TurmaId = viewModel.TurmaId,
                CursoId = viewModel.CursoId,
                Nome = viewModel.Nome,
                Codigo = viewModel.Codigo,
                DataInicio = viewModel.DataInicio,
                DataFim = viewModel.DataFim,
                Local = viewModel.Local,
                Modalidade = viewModel.Modalidade,
                NumeroVagas = viewModel.NumeroVagas,
                StatusTurma = viewModel.StatusTurma
            };

            if (viewModel.IsEdicao)
            {
                // Para atualização
                var resultado = await TurmaService.AlterarAsync(turma);
                if (resultado)
                {
                    sucesso = true;
                    Snackbar.Add("Turma atualizada com sucesso!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Erro ao atualizar a turma.", Severity.Error);
                    return;
                }
            }
            else
            {
                // Para criação
                var turmaId = await TurmaService.AdicionarAsync(turma);
                if (turmaId > 0)
                {
                    sucesso = true;
                    Snackbar.Add("Turma criada com sucesso!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Erro ao criar a turma.", Severity.Error);
                    return;
                }
            }

            if (sucesso)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (ArgumentException ex)
        {
            // Erros de validação específicos
            Snackbar.Add($"Erro de validação: {ex.Message}", Severity.Warning);
            sucesso = false;
        }
        catch (InvalidOperationException ex)
        {
            // Erros de regra de negócio
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
            sucesso = false;
        }
        catch (Exception ex)
        {
            // Outros erros
            Snackbar.Add($"Erro interno. Tente novamente. Erro: {ex.Message}", Severity.Error);
            sucesso = false;
        }
        finally
        {
            salvando = false;
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await SalvarTurma();
    }

    void Cancel() => MudDialog.Cancel();
}