@using MBGestaoEscolarAN.Entities
@using MBGestaoEscolarAN.Services.Interfaces
@using MBGestaoEscolarAN.Repository.Interfaces
@using MBGestaoEscolarAN.ViewModels
@using MudBlazor
@using System.Threading.Channels

@inject ITurmaService TurmaService
@inject ICursoService CursoService
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Class="tituloFormulario">
            <MudIcon Icon="@Icons.Material.Filled.School" Class="mr-3" /> @viewModel.TituloFormulario
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 70vh; overflow-y: auto;">
            <EditForm Model="@viewModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Nome da Turma"
                                      @bind-Value="viewModel.Nome"
                                      For="@(() => viewModel.Nome)"
                                      Required="true"
                                      Immediate="true"
                                      HelperText="Nome identificador da turma" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Código"
                                      @bind-Value="viewModel.Codigo"
                                      For="@(() => viewModel.Codigo)"
                                      Required="true"
                                      Immediate="true"
                                      HelperText="Código único da turma" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudAutocomplete T="Curso"
                                         Label="Curso"
                                         @bind-Value="cursoSelecionado"
                                         SearchFunc="@BuscarCursos"
                                         ToStringFunc="@(e => e?.Nome ?? "")"
                                         Required="true"
                                         RequiredError="Curso é obrigatório"
                                         HelperText="Digite para buscar um curso"
                                         ResetValueOnEmptyText="true"
                                         CoerceText="false"
                                         AdornmentIcon="Icons.Material.Filled.Search"
                                         AdornmentColor="Color.Primary"
                                         Clearable="true"
                                         MaxItems="10"
                                         DebounceInterval="300"
                                         ShowProgressIndicator="true"
                                         ProgressIndicatorColor="Color.Primary">
                            <ItemTemplate Context="curso">
                                <div class="d-flex flex-column">
                                    <MudText Typo="Typo.body1">@curso.Nome</MudText>
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                        Código: @curso.Codigo | CH: @curso.CargaHoraria h | @curso.Modalidade
                                    </MudText>
                                </div>
                            </ItemTemplate>
                            <NoItemsTemplate>
                                <MudText Align="Align.Center" Class="px-4 py-1">
                                    Nenhum curso encontrado
                                </MudText>
                            </NoItemsTemplate>
                        </MudAutocomplete>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Número de Vagas"
                                      @bind-Value="viewModel.NumeroVagas"
                                      For="@(() => viewModel.NumeroVagas)"
                                      Required="true"
                                      Immediate="true"
                                      HelperText="Quantidade máxima de alunos" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Data de Início"
                                       @bind-Date="dataInicioLocal"
                                       DateFormat="dd/MM/yyyy"
                                       Required="true"
                                       Placeholder="Selecione a data de início" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Data de Fim"
                                       @bind-Date="dataFimLocal"
                                       DateFormat="dd/MM/yyyy"
                                       Required="true"
                                       Placeholder="Selecione a data de término" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Local"
                                      @bind-Value="viewModel.Local"
                                      For="@(() => viewModel.Local)"
                                      Immediate="true"
                                      HelperText="Local onde as aulas serão ministradas" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="string"
                                   Label="Modalidade"
                                   @bind-Value="viewModel.Modalidade"
                                   For="@(() => viewModel.Modalidade)"
                                   Required="true">
                            <MudSelectItem Value="@("Presencial")">Presencial</MudSelectItem>
                            <MudSelectItem Value="@("Híbrido")">Híbrido</MudSelectItem>
                            <MudSelectItem Value="@("EAD")">EAD</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="string"
                                   Label="Status da Turma"
                                   @bind-Value="viewModel.StatusTurma"
                                   For="@(() => viewModel.StatusTurma)"
                                   Required="true">
                            <MudSelectItem Value="@("Cancelada")">Cancelada</MudSelectItem>
                            <MudSelectItem Value="@("Concluída")">Concluída</MudSelectItem>
                            <MudSelectItem Value="@("Inscrições Abertas")">Inscrições Abertas</MudSelectItem>
                            <MudSelectItem Value="@("Planejada")">Planejada</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   Disabled="@salvando"
                   OnClick="SalvarTurma">
            @if (salvando)
            {
                <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ml-2">Salvando...</MudText>
            }
            else
            {
                <MudText>@viewModel.TextoBotao</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public Turma turma { get; set; } = new();
    [Parameter] public string Title { get; set; } = "";

    bool sucesso = false;
    private TurmaViewModel viewModel = new();
    private bool salvando = false;
    private List<Curso> cursos = new();
    private Curso? cursoSelecionado = null;

    // Propriedades locais para gerenciar as datas
    private DateTime? dataInicioLocal
    {
        get => viewModel?.DataInicio;
        set
        {
            if (viewModel != null && value.HasValue)
            {
                viewModel.DataInicio = value.Value;
            }
        }
    }

    private DateTime? dataFimLocal
    {
        get => viewModel?.DataFim;
        set
        {
            if (viewModel != null && value.HasValue)
            {
                viewModel.DataFim = value.Value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Carrega todos os cursos ativos para uso no autocomplete
        await CarregarCursos();

        if (turma?.TurmaId > 0)
        {
            // Modo de alteração de um registro existente
            cursoSelecionado = cursos.FirstOrDefault(x => x.CursoId == turma.CursoId);

            viewModel = new TurmaViewModel
                {
                    TurmaId = turma.TurmaId,
                    CursoId = turma.CursoId,
                    NomeCurso = cursoSelecionado?.Nome ?? "",
                    Nome = turma.Nome,
                    Codigo = turma.Codigo,
                    DataInicio = turma.DataInicio,
                    DataFim = turma.DataFim,
                    Local = turma.Local,
                    Modalidade = turma.Modalidade,
                    NumeroVagas = turma.NumeroVagas,
                    StatusTurma = turma.StatusTurma
                };
        }
        else
        {
            // Modo de criação de um novo registro
            viewModel = new TurmaViewModel
                {
                    StatusTurma = "Planejada", // Alterado de "Concluída" para "Planejada" que faz mais sentido para uma turma nova
                    Modalidade = "Presencial",
                    DataInicio = DateTime.Today,
                    DataFim = DateTime.Today.AddMonths(6)
                };
        }
    }

    private async Task CarregarCursos()
    {
        try
        {
            var todosCursos = await CursoService.ListarTodosAsync();
            // Filtra apenas cursos ativos
            cursos = todosCursos.Where(c => c.StatusCurso == "Ativo").ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar cursos: {ex.Message}", Severity.Error);
            cursos = new List<Curso>();
        }
    }

    private async Task<IEnumerable<Curso>> BuscarCursos(string value, CancellationToken token)
    {
        // Se não há valor de busca, retorna uma lista limitada dos primeiros cursos
        if (string.IsNullOrEmpty(value))
            return cursos.Take(10);

        // Busca por nome ou código do curso (case insensitive)
        var resultados = cursos.Where(curso =>
            curso.Nome.Contains(value, StringComparison.OrdinalIgnoreCase) ||
            curso.Codigo.Contains(value, StringComparison.OrdinalIgnoreCase) ||
            (curso.Trilha != null && curso.Trilha.Contains(value, StringComparison.OrdinalIgnoreCase)))
            .Take(10);

        // Simula um pequeno delay para mostrar o indicador de progresso
        await Task.Delay(100, token);

        return resultados;
    }

    private async Task SalvarTurma()
    {
        try
        {
            salvando = true;

            // Validação: verifica se um curso foi selecionado
            if (cursoSelecionado == null || cursoSelecionado.CursoId <= 0)
            {
                Snackbar.Add("Por favor, selecione um curso válido.", Severity.Warning);
                return;
            }

            // Atualiza o viewModel com o curso selecionado
            viewModel.CursoId = cursoSelecionado.CursoId;
            viewModel.NomeCurso = cursoSelecionado.Nome;

            // Validação adicional de negócio
            if (viewModel.DataFim <= viewModel.DataInicio)
            {
                Snackbar.Add("A data de fim deve ser posterior à data de início.", Severity.Warning);
                return;
            }

            var turma = new Turma
                {
                    TurmaId = viewModel.TurmaId,
                    CursoId = viewModel.CursoId,
                    Nome = viewModel.Nome,
                    Codigo = viewModel.Codigo,
                    DataInicio = viewModel.DataInicio,
                    DataFim = viewModel.DataFim,
                    Local = viewModel.Local,
                    Modalidade = viewModel.Modalidade,
                    NumeroVagas = viewModel.NumeroVagas,
                    StatusTurma = viewModel.StatusTurma
                };

            if (viewModel.IsEdicao)
            {
                // Para atualização
                var resultado = await TurmaService.AlterarAsync(turma);
                if (resultado)
                {
                    sucesso = true;
                    Snackbar.Add("Turma atualizada com sucesso!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Erro ao atualizar a turma.", Severity.Error);
                    return;
                }
            }
            else
            {
                // Para criação
                var turmaId = await TurmaService.AdicionarAsync(turma);
                if (turmaId > 0)
                {
                    sucesso = true;
                    Snackbar.Add("Turma criada com sucesso!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Erro ao criar a turma.", Severity.Error);
                    return;
                }
            }

            if (sucesso)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (ArgumentException ex)
        {
            Snackbar.Add($"Erro de validação: {ex.Message}", Severity.Warning);
            sucesso = false;
        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
            sucesso = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro interno. Tente novamente. Erro: {ex.Message}", Severity.Error);
            sucesso = false;
        }
        finally
        {
            salvando = false;
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await SalvarTurma();
    }

    void Cancel() => MudDialog.Cancel();
}