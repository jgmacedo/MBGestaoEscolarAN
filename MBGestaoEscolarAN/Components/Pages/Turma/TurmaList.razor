@page "/turma"
@using MBGestaoEscolarAN.ViewModels
@using MudBlazor
@using MBGestaoEscolarAN.Entities
@using MBGestaoEscolarAN.Services.Interfaces

@inject ITurmaService TurmaService
@inject ICursoService CursoService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6" Class="mb-4">Turmas Cadastradas</MudText>
        <MudPaper Class="d-flex justify-end flex-grow-1 mb-6" Elevation="0">
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Add"
                       Disabled="@(_dialogOpen)"
                       OnClick="() => ShowDialog(0)">
                Adicionar Turma
            </MudButton>
        </MudPaper>
        <MudDataGrid T="TurmaViewModel" Items="@_turmas" SortMode="SortMode.Multiple" Hover="true">
            <Columns>
                <PropertyColumn Property="x => x.TurmaId" Title="ID" />
                <PropertyColumn Property="x => x.Codigo" Title="Código" />
                <PropertyColumn Property="x => x.Nome" Title="Nome da Turma" />
                <PropertyColumn Property="x => x.NomeCurso" Title="Curso" />
                <PropertyColumn Property="x => x.DataInicio"
                                Title="Data Início"
                                Format="dd/MM/yyyy" />
                <PropertyColumn Property="x => x.DataFim"
                                Title="Data Fim"
                                Format="dd/MM/yyyy" />
                <PropertyColumn Property="x => x.Local" Title="Local" />
                <PropertyColumn Property="x => x.Modalidade" Title="Modalidade" />
                <PropertyColumn Property="x => x.NumeroVagas" Title="Vagas" />
                <PropertyColumn Property="x => x.StatusTurma" Title="Status" />
                <TemplateColumn StickyRight="true" Title="Ações">
                    <CellTemplate>
                        <MudIconButton Color="Color.Primary"
                                       Icon="@Icons.Material.Filled.Edit"
                                       Size="Size.Small"
                                       OnClick="() => ShowDialog(context.Item.TurmaId)" />
                        <MudIconButton Color="Color.Secondary"
                                       Icon="@Icons.Material.Filled.Delete"
                                       Size="Size.Small"
                                       OnClick="() => ConfirmaExclusaoTurma(context.Item)" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="TurmaViewModel" />
            </PagerContent>
        </MudDataGrid>
    </MudCardContent>
</MudCard>

@code {
    private List<TurmaViewModel> _turmas = new();
    private bool _dialogOpen;
    private readonly DialogOptions _dialogOptions = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

    protected override async Task OnInitializedAsync()
    {
        await CarregarTurmas();
    }

    private async Task CarregarTurmas()
    {
        try
        {
            var turmas = await TurmaService.ListarTodosAsync();
            var cursos = (await CursoService.ListarTodosAsync()).ToList();

            _turmas = turmas.Select(turma =>
            {
                var curso = cursos.FirstOrDefault(c => c.CursoId == turma.CursoId);
                return new TurmaViewModel
                    {
                        TurmaId = turma.TurmaId,
                        Codigo = turma.Codigo,
                        Nome = turma.Nome,
                        CursoId = turma.CursoId,
                        NomeCurso = curso?.Nome ?? "",
                        DataInicio = turma.DataInicio,
                        DataFim = turma.DataFim,
                        Local = turma.Local,
                        Modalidade = turma.Modalidade,
                        NumeroVagas = turma.NumeroVagas,
                        StatusTurma = turma.StatusTurma
                    };
            }).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar as turmas: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowDialog(int turmaId)
    {
        _dialogOpen = true;
        var parameters = new DialogParameters();

        if (turmaId > 0)
        {
            // Modo edição - busca a turma no banco
            try
            {
                var turmaEntity = await TurmaService.ListarPorIdAsync(turmaId);
                if (turmaEntity != null)
                {
                    parameters.Add("turma", turmaEntity);
                    parameters.Add("Title", "Editar Turma");
                }
                else
                {
                    Snackbar.Add("Turma não encontrada.", Severity.Error);
                    _dialogOpen = false;
                    return;
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao carregar turma: {ex.Message}", Severity.Error);
                _dialogOpen = false;
                return;
            }
        }
        else
        {
            // Modo criação - passa uma turma vazia
            parameters.Add("turma", new Turma());
            parameters.Add("Title", "Nova Turma");
        }

        var dialog = await DialogService.ShowAsync<TurmaDialog>(
            parameters["Title"]!.ToString(),
            parameters,
            _dialogOptions
        );

        var result = await dialog.Result;

        _dialogOpen = false;
        if (!result.Canceled)
        {
            await CarregarTurmas();
            StateHasChanged();
        }
    }

    private async Task ConfirmaExclusaoTurma(TurmaViewModel turma)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Confirmação de Exclusão",
            $"Deseja realmente excluir a turma {turma.Nome} (Código: {turma.Codigo})?",
            yesText: "Sim",
            cancelText: "Não"
        );

        if (confirmed == true)
        {
            try
            {
                var sucesso = await TurmaService.ExcluirAsync(turma.TurmaId);
                if (sucesso)
                {
                    await CarregarTurmas();
                    Snackbar.Add($"Turma '{turma.Nome}' removida com sucesso.", Severity.Success);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Erro ao excluir a turma '{turma.Nome}'.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao excluir turma: {ex.Message}", Severity.Error);
            }
        }
    }
}